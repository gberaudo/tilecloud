#!/usr/bin/env python

from itertools import imap
import logging
from optparse import OptionParser
import os.path
import random
import sys

from tilecloud import BoundingPyramid, TileStore, consume
from tilecloud.filter.benchmark import Benchmark, Statsd, StatsdCountErrors, StatsdCountTiles
from tilecloud.filter.consistenthash import EveryNth
from tilecloud.filter.contenttype import ContentTypeAdder
from tilecloud.filter.error import DropErrors, LogErrors, MaximumConsecutiveErrors, MaximumErrorRate, MaximumErrors
from tilecloud.filter.logger import Logger
from tilecloud.filter.rate import RateLimit
from tilecloud.store.boundingpyramid import BoundingPyramidTileStore


def main(argv):
    logger = logging.getLogger(os.path.basename(argv[0]))
    logging.basicConfig(level=logging.INFO)
    grid = QuadTileGrid(max_zoom=13))
    bounding_pyramid = BoundingPyramid(bounds=[0, 5621521, 556597, 6446275], tilegrid=grid)
    input_tilestore = URLTileStore(WMSTileLayout('http://...', 'layer', 'srs', 'format', grid))
    output_tilestore = FilesystemTileStore(OSMTileLayout())
    tilestream = BoundingPyramidTileStore(bounding_pyramid).list()
    tilestream = input_tilestore.get(tilestream)
    tilestream = imap(LogErrors(logger, logging.ERROR, '%(tilecoord)s: %(error)s'), tilestream)
    tilestream = imap(MaximumConsecutiveErrors(10), tilestream)
    tilestream = imap(DropErrors(), tilestream)
    tilestream = output_tilestore.put(tilestream)
    consume(tilestream)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
